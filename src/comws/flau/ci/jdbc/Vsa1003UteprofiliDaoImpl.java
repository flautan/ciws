/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package comws.flau.ci.jdbc;

import comws.flau.ci.dao.*;
import comws.flau.ci.factory.*;
import comws.flau.ci.dto.*;
import comws.flau.ci.exceptions.*;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class Vsa1003UteprofiliDaoImpl extends AbstractDAO implements Vsa1003UteprofiliDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT PRG_APP, PRG_UTE, PRG_PRF_PDR, PRG_PRF_FGL, DES_PRF_PDR, DES_PRF FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column PRG_APP
	 */
	protected static final int COLUMN_PRG_APP = 1;

	/** 
	 * Index of column PRG_UTE
	 */
	protected static final int COLUMN_PRG_UTE = 2;

	/** 
	 * Index of column PRG_PRF_PDR
	 */
	protected static final int COLUMN_PRG_PRF_PDR = 3;

	/** 
	 * Index of column PRG_PRF_FGL
	 */
	protected static final int COLUMN_PRG_PRF_FGL = 4;

	/** 
	 * Index of column DES_PRF_PDR
	 */
	protected static final int COLUMN_DES_PRF_PDR = 5;

	/** 
	 * Index of column DES_PRF
	 */
	protected static final int COLUMN_DES_PRF = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Returns all rows from the vsa1003_uteprofili table that match the criteria ''.
	 */
	public Vsa1003Uteprofili[] findAll() throws Vsa1003UteprofiliDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the vsa1003_uteprofili table that match the criteria 'PRG_APP = :prgApp AND PRG_UTE = :prgUte AND PRG_PRF_PDR = :prgPrfPdr  AND RG_PRF_FGL = :prgPrfFgl'.
	 */
	public Vsa1003Uteprofili[] findWherePrgAppUtePdrFglEquals(int prgApp, int prgUte, int prgPrfPdr, int prgPrfFgl) throws Vsa1003UteprofiliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_APP = ? AND PRG_UTE = ? AND PRG_PRF_PDR = ?  AND RG_PRF_FGL = ? ORDER BY PRG_APP", new Object[] {  new Integer(prgApp),  new Integer(prgUte),  new Integer(prgPrfPdr),  new Integer(prgPrfFgl) } );
	}

	/** 
	 * Returns all rows from the vsa1003_uteprofili table that match the criteria 'PRG_UTE = :prgUte'.
	 */
	public Vsa1003Uteprofili[] findWherePrgUteEquals(int prgUte) throws Vsa1003UteprofiliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_UTE = ? ORDER BY PRG_UTE", new Object[] {  new Integer(prgUte) } );
	}

	/** 
	 * Returns all rows from the vsa1003_uteprofili table that match the criteria 'DES_PRF_PDR = :desPrfPdr'.
	 */
	public Vsa1003Uteprofili[] findWhereDesPrfPdrEquals(String desPrfPdr) throws Vsa1003UteprofiliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_PRF_PDR = ? ORDER BY DES_PRF_PDR", new Object[] { desPrfPdr } );
	}

	/** 
	 * Returns all rows from the vsa1003_uteprofili table that match the criteria 'DES_PRF = :desPrf'.
	 */
	public Vsa1003Uteprofili[] findWhereDesPrfEquals(String desPrf) throws Vsa1003UteprofiliDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_PRF = ? ORDER BY DES_PRF", new Object[] { desPrf } );
	}

	/**
	 * Method 'Vsa1003UteprofiliDaoImpl'
	 * 
	 */
	public Vsa1003UteprofiliDaoImpl()
	{
	}

	/**
	 * Method 'Vsa1003UteprofiliDaoImpl'
	 * 
	 * @param userConn
	 */
	public Vsa1003UteprofiliDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "group700_fig.vsa1003_uteprofili";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Vsa1003Uteprofili fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Vsa1003Uteprofili dto = new Vsa1003Uteprofili();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Vsa1003Uteprofili[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Vsa1003Uteprofili dto = new Vsa1003Uteprofili();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Vsa1003Uteprofili ret[] = new Vsa1003Uteprofili[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Vsa1003Uteprofili dto, ResultSet rs) throws SQLException
	{
		dto.setPrgApp( rs.getInt( COLUMN_PRG_APP ) );
		dto.setPrgUte( rs.getInt( COLUMN_PRG_UTE ) );
		dto.setPrgPrfPdr( rs.getInt( COLUMN_PRG_PRF_PDR ) );
		dto.setPrgPrfFgl( rs.getInt( COLUMN_PRG_PRF_FGL ) );
		dto.setDesPrfPdr( rs.getString( COLUMN_DES_PRF_PDR ) );
		dto.setDesPrf( rs.getString( COLUMN_DES_PRF ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Vsa1003Uteprofili dto)
	{
	}

	/** 
	 * Returns all rows from the vsa1003_uteprofili table that match the specified arbitrary SQL statement
	 */
	public Vsa1003Uteprofili[] findByDynamicSelect(String sql, Object[] sqlParams) throws Vsa1003UteprofiliDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Vsa1003UteprofiliDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the vsa1003_uteprofili table that match the specified arbitrary SQL statement
	 */
	public Vsa1003Uteprofili[] findByDynamicWhere(String sql, Object[] sqlParams) throws Vsa1003UteprofiliDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Vsa1003UteprofiliDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}


}
