/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package comws.flau.ci.jdbc;

import comws.flau.ci.dao.*;
import comws.flau.ci.factory.*;
import java.util.Date;
import comws.flau.ci.dto.*;
import comws.flau.ci.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class Tci0003DipendentecigoDaoImpl extends AbstractDAO implements Tci0003DipendentecigoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT pr, iddipendente, Commessa, allocato, reparto, PercentualeCIGO, datainizio, datafine, datarientroanticipato, formazione, fulltime FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( pr, iddipendente, Commessa, allocato, reparto, PercentualeCIGO, datainizio, datafine, datarientroanticipato, formazione, fulltime ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET pr = ?, iddipendente = ?, Commessa = ?, allocato = ?, reparto = ?, PercentualeCIGO = ?, datainizio = ?, datafine = ?, datarientroanticipato = ?, formazione = ?, fulltime = ? WHERE pr = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE pr = ?";

	/** 
	 * Index of column pr
	 */
	protected static final int COLUMN_PR = 1;

	/** 
	 * Index of column iddipendente
	 */
	protected static final int COLUMN_IDDIPENDENTE = 2;

	/** 
	 * Index of column Commessa
	 */
	protected static final int COLUMN_COMMESSA = 3;

	/** 
	 * Index of column allocato
	 */
	protected static final int COLUMN_ALLOCATO = 4;

	/** 
	 * Index of column reparto
	 */
	protected static final int COLUMN_REPARTO = 5;

	/** 
	 * Index of column PercentualeCIGO
	 */
	protected static final int COLUMN_PERCENTUALE_C_I_G_O = 6;

	/** 
	 * Index of column datainizio
	 */
	protected static final int COLUMN_DATAINIZIO = 7;

	/** 
	 * Index of column datafine
	 */
	protected static final int COLUMN_DATAFINE = 8;

	/** 
	 * Index of column datarientroanticipato
	 */
	protected static final int COLUMN_DATARIENTROANTICIPATO = 9;

	/** 
	 * Index of column formazione
	 */
	protected static final int COLUMN_FORMAZIONE = 10;

	/** 
	 * Index of column fulltime
	 */
	protected static final int COLUMN_FULLTIME = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column pr
	 */
	protected static final int PK_COLUMN_PR = 1;

	/** 
	 * Inserts a new row in the tci0003_dipendentecigo table.
	 */
	public Tci0003DipendentecigoPk insert(Tci0003Dipendentecigo dto) throws Tci0003DipendentecigoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getPr() );
			if (dto.isIddipendenteNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIddipendente() );
			}
		
			stmt.setString( index++, dto.getCommessa() );
			stmt.setString( index++, dto.getAllocato() );
			stmt.setString( index++, dto.getReparto() );
			if (dto.isPercentualeCIGONull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPercentualeCIGO() );
			}
		
			stmt.setTimestamp(index++, dto.getDatainizio()==null ? null : new java.sql.Timestamp( dto.getDatainizio().getTime() ) );
			stmt.setTimestamp(index++, dto.getDatafine()==null ? null : new java.sql.Timestamp( dto.getDatafine().getTime() ) );
			stmt.setTimestamp(index++, dto.getDatarientroanticipato()==null ? null : new java.sql.Timestamp( dto.getDatarientroanticipato().getTime() ) );
			stmt.setString( index++, dto.getFormazione() );
			stmt.setString( index++, dto.getFulltime() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tci0003DipendentecigoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the tci0003_dipendentecigo table.
	 */
	public void update(Tci0003DipendentecigoPk pk, Tci0003Dipendentecigo dto) throws Tci0003DipendentecigoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getPr() );
			if (dto.isIddipendenteNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIddipendente() );
			}
		
			stmt.setString( index++, dto.getCommessa() );
			stmt.setString( index++, dto.getAllocato() );
			stmt.setString( index++, dto.getReparto() );
			if (dto.isPercentualeCIGONull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getPercentualeCIGO() );
			}
		
			stmt.setTimestamp(index++, dto.getDatainizio()==null ? null : new java.sql.Timestamp( dto.getDatainizio().getTime() ) );
			stmt.setTimestamp(index++, dto.getDatafine()==null ? null : new java.sql.Timestamp( dto.getDatafine().getTime() ) );
			stmt.setTimestamp(index++, dto.getDatarientroanticipato()==null ? null : new java.sql.Timestamp( dto.getDatarientroanticipato().getTime() ) );
			stmt.setString( index++, dto.getFormazione() );
			stmt.setString( index++, dto.getFulltime() );
			stmt.setInt( 12, pk.getPr() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tci0003DipendentecigoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the tci0003_dipendentecigo table.
	 */
	public void delete(Tci0003DipendentecigoPk pk) throws Tci0003DipendentecigoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getPr() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tci0003DipendentecigoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the tci0003_dipendentecigo table that matches the specified primary-key value.
	 */
	public Tci0003Dipendentecigo findByPrimaryKey(Tci0003DipendentecigoPk pk) throws Tci0003DipendentecigoDaoException
	{
		return findByPrimaryKey( pk.getPr() );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'pr = :pr'.
	 */
	public Tci0003Dipendentecigo findByPrimaryKey(int pr) throws Tci0003DipendentecigoDaoException
	{
		Tci0003Dipendentecigo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE pr = ?", new Object[] {  new Integer(pr) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'full-time = :fullTime'.
	 */
	public Tci0003Dipendentecigo[] findWhereFullTimeEquals(String fullTime) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE full-time = ? ORDER BY full-time", new Object[] { fullTime } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria ''.
	 */
	public Tci0003Dipendentecigo[] findAll() throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY pr", null );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'pr = :pr'.
	 */
	public Tci0003Dipendentecigo[] findWherePrEquals(int pr) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pr = ? ORDER BY pr", new Object[] {  new Integer(pr) } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'iddipendente = :iddipendente'.
	 */
	public Tci0003Dipendentecigo[] findWhereIddipendenteEquals(int iddipendente) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE iddipendente = ? ORDER BY iddipendente", new Object[] {  new Integer(iddipendente) } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'Commessa = :commessa'.
	 */
	public Tci0003Dipendentecigo[] findWhereCommessaEquals(String commessa) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Commessa = ? ORDER BY Commessa", new Object[] { commessa } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'allocato = :allocato'.
	 */
	public Tci0003Dipendentecigo[] findWhereAllocatoEquals(String allocato) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE allocato = ? ORDER BY allocato", new Object[] { allocato } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'fulltime = :fulltime'.
	 */
	public Tci0003Dipendentecigo[] findWhereFulltimeEquals(String fulltime) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fulltime = ? ORDER BY fulltime", new Object[] { fulltime } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'reparto = :reparto'.
	 */
	public Tci0003Dipendentecigo[] findWhereRepartoEquals(String reparto) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE reparto = ? ORDER BY reparto", new Object[] { reparto } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'PercentualeCIGO = :percentualeCIGO'.
	 */
	public Tci0003Dipendentecigo[] findWherePercentualeCIGOEquals(int percentualeCIGO) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PercentualeCIGO = ? ORDER BY PercentualeCIGO", new Object[] {  new Integer(percentualeCIGO) } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'datainizio = :datainizio'.
	 */
	public Tci0003Dipendentecigo[] findWhereDatainizioEquals(Date datainizio) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE datainizio = ? ORDER BY datainizio", new Object[] { datainizio==null ? null : new java.sql.Timestamp( datainizio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'datafine = :datafine'.
	 */
	public Tci0003Dipendentecigo[] findWhereDatafineEquals(Date datafine) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE datafine = ? ORDER BY datafine", new Object[] { datafine==null ? null : new java.sql.Timestamp( datafine.getTime() ) } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'datarientroanticipato = :datarientroanticipato'.
	 */
	public Tci0003Dipendentecigo[] findWhereDatarientroanticipatoEquals(Date datarientroanticipato) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE datarientroanticipato = ? ORDER BY datarientroanticipato", new Object[] { datarientroanticipato==null ? null : new java.sql.Timestamp( datarientroanticipato.getTime() ) } );
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the criteria 'formazione = :formazione'.
	 */
	public Tci0003Dipendentecigo[] findWhereFormazioneEquals(String formazione) throws Tci0003DipendentecigoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE formazione = ? ORDER BY formazione", new Object[] { formazione } );
	}

	/**
	 * Method 'Tci0003DipendentecigoDaoImpl'
	 * 
	 */
	public Tci0003DipendentecigoDaoImpl()
	{
	}

	/**
	 * Method 'Tci0003DipendentecigoDaoImpl'
	 * 
	 * @param userConn
	 */
	public Tci0003DipendentecigoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "group700_fig.tci0003_dipendentecigo";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Tci0003Dipendentecigo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Tci0003Dipendentecigo dto = new Tci0003Dipendentecigo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Tci0003Dipendentecigo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Tci0003Dipendentecigo dto = new Tci0003Dipendentecigo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Tci0003Dipendentecigo ret[] = new Tci0003Dipendentecigo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Tci0003Dipendentecigo dto, ResultSet rs) throws SQLException
	{
		dto.setPr( rs.getInt( COLUMN_PR ) );
		dto.setIddipendente( rs.getInt( COLUMN_IDDIPENDENTE ) );
		if (rs.wasNull()) {
			dto.setIddipendenteNull( true );
		}
		
		dto.setCommessa( rs.getString( COLUMN_COMMESSA ) );
		dto.setAllocato( rs.getString( COLUMN_ALLOCATO ) );
		dto.setReparto( rs.getString( COLUMN_REPARTO ) );
		dto.setPercentualeCIGO( rs.getInt( COLUMN_PERCENTUALE_C_I_G_O ) );
		if (rs.wasNull()) {
			dto.setPercentualeCIGONull( true );
		}
		
		dto.setDatainizio( rs.getTimestamp(COLUMN_DATAINIZIO ) );
		dto.setDatafine( rs.getTimestamp(COLUMN_DATAFINE ) );
		dto.setDatarientroanticipato( rs.getTimestamp(COLUMN_DATARIENTROANTICIPATO ) );
		dto.setFormazione( rs.getString( COLUMN_FORMAZIONE ) );
		dto.setFulltime( rs.getString( COLUMN_FULLTIME ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Tci0003Dipendentecigo dto)
	{
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the specified arbitrary SQL statement
	 */
	public Tci0003Dipendentecigo[] findByDynamicSelect(String sql, Object[] sqlParams) throws Tci0003DipendentecigoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tci0003DipendentecigoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the tci0003_dipendentecigo table that match the specified arbitrary SQL statement
	 */
	public Tci0003Dipendentecigo[] findByDynamicWhere(String sql, Object[] sqlParams) throws Tci0003DipendentecigoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tci0003DipendentecigoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
