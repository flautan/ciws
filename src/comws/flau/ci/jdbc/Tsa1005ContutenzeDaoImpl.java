/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package comws.flau.ci.jdbc;

import comws.flau.ci.dao.*;
import comws.flau.ci.factory.*;
import java.util.Date;
import comws.flau.ci.dto.*;
import comws.flau.ci.exceptions.*;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class Tsa1005ContutenzeDaoImpl extends AbstractDAO implements Tsa1005ContutenzeDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT DES_VAL_CNT, ORD_CNT, PRG_CNT, DAT_ORA_ULT_MOV, COD_UTE_ULT_MOV, COD_PGM_ULT_MOV, PRG_PRF_FGL, PRG_UTE, PRG_PRF_PDR, FLG_ABL, PRG_APP, FLG_CAN, FLG_TRA_DAT FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( DES_VAL_CNT, ORD_CNT, PRG_CNT, DAT_ORA_ULT_MOV, COD_UTE_ULT_MOV, COD_PGM_ULT_MOV, PRG_PRF_FGL, PRG_UTE, PRG_PRF_PDR, FLG_ABL, PRG_APP, FLG_CAN, FLG_TRA_DAT ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET DES_VAL_CNT = ?, ORD_CNT = ?, PRG_CNT = ?, DAT_ORA_ULT_MOV = ?, COD_UTE_ULT_MOV = ?, COD_PGM_ULT_MOV = ?, PRG_PRF_FGL = ?, PRG_UTE = ?, PRG_PRF_PDR = ?, FLG_ABL = ?, PRG_APP = ?, FLG_CAN = ?, FLG_TRA_DAT = ? WHERE PRG_CNT = ? AND PRG_UTE = ? AND PRG_PRF_FGL = ? AND PRG_PRF_PDR = ? AND PRG_APP = ? AND ORD_CNT = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE PRG_CNT = ? AND PRG_UTE = ? AND PRG_PRF_FGL = ? AND PRG_PRF_PDR = ? AND PRG_APP = ? AND ORD_CNT = ?";

	/** 
	 * Index of column DES_VAL_CNT
	 */
	protected static final int COLUMN_DES_VAL_CNT = 1;

	/** 
	 * Index of column ORD_CNT
	 */
	protected static final int COLUMN_ORD_CNT = 2;

	/** 
	 * Index of column PRG_CNT
	 */
	protected static final int COLUMN_PRG_CNT = 3;

	/** 
	 * Index of column DAT_ORA_ULT_MOV
	 */
	protected static final int COLUMN_DAT_ORA_ULT_MOV = 4;

	/** 
	 * Index of column COD_UTE_ULT_MOV
	 */
	protected static final int COLUMN_COD_UTE_ULT_MOV = 5;

	/** 
	 * Index of column COD_PGM_ULT_MOV
	 */
	protected static final int COLUMN_COD_PGM_ULT_MOV = 6;

	/** 
	 * Index of column PRG_PRF_FGL
	 */
	protected static final int COLUMN_PRG_PRF_FGL = 7;

	/** 
	 * Index of column PRG_UTE
	 */
	protected static final int COLUMN_PRG_UTE = 8;

	/** 
	 * Index of column PRG_PRF_PDR
	 */
	protected static final int COLUMN_PRG_PRF_PDR = 9;

	/** 
	 * Index of column FLG_ABL
	 */
	protected static final int COLUMN_FLG_ABL = 10;

	/** 
	 * Index of column PRG_APP
	 */
	protected static final int COLUMN_PRG_APP = 11;

	/** 
	 * Index of column FLG_CAN
	 */
	protected static final int COLUMN_FLG_CAN = 12;

	/** 
	 * Index of column FLG_TRA_DAT
	 */
	protected static final int COLUMN_FLG_TRA_DAT = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column PRG_CNT
	 */
	protected static final int PK_COLUMN_PRG_CNT = 1;

	/** 
	 * Index of primary-key column PRG_UTE
	 */
	protected static final int PK_COLUMN_PRG_UTE = 2;

	/** 
	 * Index of primary-key column PRG_PRF_FGL
	 */
	protected static final int PK_COLUMN_PRG_PRF_FGL = 3;

	/** 
	 * Index of primary-key column PRG_PRF_PDR
	 */
	protected static final int PK_COLUMN_PRG_PRF_PDR = 4;

	/** 
	 * Index of primary-key column PRG_APP
	 */
	protected static final int PK_COLUMN_PRG_APP = 5;

	/** 
	 * Index of primary-key column ORD_CNT
	 */
	protected static final int PK_COLUMN_ORD_CNT = 6;

	/** 
	 * Inserts a new row in the tsa1005_contutenze table.
	 */
	public Tsa1005ContutenzePk insert(Tsa1005Contutenze dto) throws Tsa1005ContutenzeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getDesValCnt() );
			stmt.setInt( index++, dto.getOrdCnt() );
			stmt.setInt( index++, dto.getPrgCnt() );
			stmt.setDate(index++, dto.getDatOraUltMov()==null ? null : new java.sql.Date( dto.getDatOraUltMov().getTime() ) );
			stmt.setString( index++, dto.getCodUteUltMov() );
			stmt.setString( index++, dto.getCodPgmUltMov() );
			stmt.setInt( index++, dto.getPrgPrfFgl() );
			stmt.setInt( index++, dto.getPrgUte() );
			stmt.setInt( index++, dto.getPrgPrfPdr() );
			stmt.setString( index++, dto.getFlgAbl() );
			stmt.setInt( index++, dto.getPrgApp() );
			stmt.setString( index++, dto.getFlgCan() );
			stmt.setString( index++, dto.getFlgTraDat() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tsa1005ContutenzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the tsa1005_contutenze table.
	 */
	public void update(Tsa1005ContutenzePk pk, Tsa1005Contutenze dto) throws Tsa1005ContutenzeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getDesValCnt() );
			stmt.setInt( index++, dto.getOrdCnt() );
			stmt.setInt( index++, dto.getPrgCnt() );
			stmt.setDate(index++, dto.getDatOraUltMov()==null ? null : new java.sql.Date( dto.getDatOraUltMov().getTime() ) );
			stmt.setString( index++, dto.getCodUteUltMov() );
			stmt.setString( index++, dto.getCodPgmUltMov() );
			stmt.setInt( index++, dto.getPrgPrfFgl() );
			stmt.setInt( index++, dto.getPrgUte() );
			stmt.setInt( index++, dto.getPrgPrfPdr() );
			stmt.setString( index++, dto.getFlgAbl() );
			stmt.setInt( index++, dto.getPrgApp() );
			stmt.setString( index++, dto.getFlgCan() );
			stmt.setString( index++, dto.getFlgTraDat() );
			stmt.setInt( 14, pk.getPrgCnt() );
			stmt.setInt( 15, pk.getPrgUte() );
			stmt.setInt( 16, pk.getPrgPrfFgl() );
			stmt.setInt( 17, pk.getPrgPrfPdr() );
			stmt.setInt( 18, pk.getPrgApp() );
			stmt.setInt( 19, pk.getOrdCnt() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tsa1005ContutenzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the tsa1005_contutenze table.
	 */
	public void delete(Tsa1005ContutenzePk pk) throws Tsa1005ContutenzeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getPrgCnt() );
			stmt.setInt( 2, pk.getPrgUte() );
			stmt.setInt( 3, pk.getPrgPrfFgl() );
			stmt.setInt( 4, pk.getPrgPrfPdr() );
			stmt.setInt( 5, pk.getPrgApp() );
			stmt.setInt( 6, pk.getOrdCnt() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tsa1005ContutenzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the tsa1005_contutenze table that matches the specified primary-key value.
	 */
	public Tsa1005Contutenze findByPrimaryKey(Tsa1005ContutenzePk pk) throws Tsa1005ContutenzeDaoException
	{
		return findByPrimaryKey( pk.getPrgCnt(), pk.getPrgUte(), pk.getPrgPrfFgl(), pk.getPrgPrfPdr(), pk.getPrgApp(), pk.getOrdCnt() );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'PRG_CNT = :prgCnt AND PRG_UTE = :prgUte AND PRG_PRF_FGL = :prgPrfFgl AND PRG_PRF_PDR = :prgPrfPdr AND PRG_APP = :prgApp AND ORD_CNT = :ordCnt'.
	 */
	public Tsa1005Contutenze findByPrimaryKey(int prgCnt, int prgUte, int prgPrfFgl, int prgPrfPdr, int prgApp, int ordCnt) throws Tsa1005ContutenzeDaoException
	{
		Tsa1005Contutenze ret[] = findByDynamicSelect( SQL_SELECT + " WHERE PRG_CNT = ? AND PRG_UTE = ? AND PRG_PRF_FGL = ? AND PRG_PRF_PDR = ? AND PRG_APP = ? AND ORD_CNT = ?", new Object[] {  new Integer(prgCnt),  new Integer(prgUte),  new Integer(prgPrfFgl),  new Integer(prgPrfPdr),  new Integer(prgApp),  new Integer(ordCnt) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria ''.
	 */
	public Tsa1005Contutenze[] findAll() throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY PRG_CNT, PRG_UTE, PRG_PRF_FGL, PRG_PRF_PDR, PRG_APP, ORD_CNT", null );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'DES_VAL_CNT = :desValCnt'.
	 */
	public Tsa1005Contutenze[] findWhereDesValCntEquals(String desValCnt) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_VAL_CNT = ? ORDER BY DES_VAL_CNT", new Object[] { desValCnt } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'ORD_CNT = :ordCnt'.
	 */
	public Tsa1005Contutenze[] findWhereOrdCntEquals(int ordCnt) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORD_CNT = ? ORDER BY ORD_CNT", new Object[] {  new Integer(ordCnt) } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'PRG_CNT = :prgCnt'.
	 */
	public Tsa1005Contutenze[] findWherePrgCntEquals(int prgCnt) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_CNT = ? ORDER BY PRG_CNT", new Object[] {  new Integer(prgCnt) } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'PRG_PRF_FGL = :prgPrfFgl'.
	 */
	public Tsa1005Contutenze[] findWherePrgPrfFglEquals(int prgPrfFgl) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_PRF_FGL = ? ORDER BY PRG_PRF_FGL", new Object[] {  new Integer(prgPrfFgl) } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'PRG_UTE = :prgUte AND PRG_APP = :prgApp AND PRG_PRF_PDR = :prgPrfPdr AND PRG_PRF_FGL = :prgPrfFgl'.
	 */
	public Tsa1005Contutenze[] findWherePrgAppUtePdrFglEquals(int prgUte, int prgApp, int prgPrfPdr, int prgPrfFgl) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_UTE = ? AND PRG_APP = ? AND PRG_PRF_PDR = ? AND PRG_PRF_FGL = ? ORDER BY ORD_CNT", new Object[] {  new Integer(prgUte),  new Integer(prgApp),  new Integer(prgPrfPdr),  new Integer(prgPrfFgl) } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'PRG_PRF_PDR = :prgPrfPdr'.
	 */
	public Tsa1005Contutenze[] findWherePrgPrfPdrEquals(int prgPrfPdr) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_PRF_PDR = ? ORDER BY PRG_PRF_PDR", new Object[] {  new Integer(prgPrfPdr) } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'FLG_ABL = :flgAbl'.
	 */
	public Tsa1005Contutenze[] findWhereFlgAblEquals(String flgAbl) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FLG_ABL = ? ORDER BY FLG_ABL", new Object[] { flgAbl } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'PRG_APP = :prgApp'.
	 */
	public Tsa1005Contutenze[] findWherePrgAppEquals(int prgApp) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_APP = ? ORDER BY PRG_APP", new Object[] {  new Integer(prgApp) } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'FLG_CAN = :flgCan'.
	 */
	public Tsa1005Contutenze[] findWhereFlgCanEquals(String flgCan) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FLG_CAN = ? ORDER BY FLG_CAN", new Object[] { flgCan } );
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the criteria 'FLG_TRA_DAT = :flgTraDat'.
	 */
	public Tsa1005Contutenze[] findWhereFlgTraDatEquals(String flgTraDat) throws Tsa1005ContutenzeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FLG_TRA_DAT = ? ORDER BY FLG_TRA_DAT", new Object[] { flgTraDat } );
	}

	/**
	 * Method 'Tsa1005ContutenzeDaoImpl'
	 * 
	 */
	public Tsa1005ContutenzeDaoImpl()
	{
	}

	/**
	 * Method 'Tsa1005ContutenzeDaoImpl'
	 * 
	 * @param userConn
	 */
	public Tsa1005ContutenzeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "group700_fig.tsa1005_contutenze";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Tsa1005Contutenze fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Tsa1005Contutenze dto = new Tsa1005Contutenze();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Tsa1005Contutenze[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Tsa1005Contutenze dto = new Tsa1005Contutenze();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Tsa1005Contutenze ret[] = new Tsa1005Contutenze[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Tsa1005Contutenze dto, ResultSet rs) throws SQLException
	{
		dto.setDesValCnt( rs.getString( COLUMN_DES_VAL_CNT ) );
		dto.setOrdCnt( rs.getInt( COLUMN_ORD_CNT ) );
		dto.setPrgCnt( rs.getInt( COLUMN_PRG_CNT ) );
		dto.setDatOraUltMov( rs.getDate(COLUMN_DAT_ORA_ULT_MOV ) );
		dto.setCodUteUltMov( rs.getString( COLUMN_COD_UTE_ULT_MOV ) );
		dto.setCodPgmUltMov( rs.getString( COLUMN_COD_PGM_ULT_MOV ) );
		dto.setPrgPrfFgl( rs.getInt( COLUMN_PRG_PRF_FGL ) );
		dto.setPrgUte( rs.getInt( COLUMN_PRG_UTE ) );
		dto.setPrgPrfPdr( rs.getInt( COLUMN_PRG_PRF_PDR ) );
		dto.setFlgAbl( rs.getString( COLUMN_FLG_ABL ) );
		dto.setPrgApp( rs.getInt( COLUMN_PRG_APP ) );
		dto.setFlgCan( rs.getString( COLUMN_FLG_CAN ) );
		dto.setFlgTraDat( rs.getString( COLUMN_FLG_TRA_DAT ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Tsa1005Contutenze dto)
	{
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the specified arbitrary SQL statement
	 */
	public Tsa1005Contutenze[] findByDynamicSelect(String sql, Object[] sqlParams) throws Tsa1005ContutenzeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tsa1005ContutenzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the tsa1005_contutenze table that match the specified arbitrary SQL statement
	 */
	public Tsa1005Contutenze[] findByDynamicWhere(String sql, Object[] sqlParams) throws Tsa1005ContutenzeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Tsa1005ContutenzeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
