/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package comws.flau.ci.jdbc;

import comws.flau.ci.dao.*;
import comws.flau.ci.factory.*;
import java.util.Date;
import comws.flau.ci.dto.*;
import comws.flau.ci.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class VciElenco001DaoImpl extends AbstractDAO implements VciElenco001Dao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT PRG_UTE, DES_UTE, COD_FISCALE, DES_IND_EMAIL, DES_IND_EMAIL_ALT, DES_PSW, DES_FILE_LDAP, COD_PGM_ULT_MOV, COD_UTE_ULT_MOV, DAT_ORA_ULT_MOV, FLG_VAL_UTE, DES_COG, DES_NOM, pr, iddipendente, Commessa, allocato, reparto, PercentualeCIGO, datainizio, datafine, datarientroanticipato, formazione, fulltime FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column PRG_UTE
	 */
	protected static final int COLUMN_PRG_UTE = 1;

	/** 
	 * Index of column DES_UTE
	 */
	protected static final int COLUMN_DES_UTE = 2;

	/** 
	 * Index of column COD_FISCALE
	 */
	protected static final int COLUMN_COD_FISCALE = 3;

	/** 
	 * Index of column DES_IND_EMAIL
	 */
	protected static final int COLUMN_DES_IND_EMAIL = 4;

	/** 
	 * Index of column DES_IND_EMAIL_ALT
	 */
	protected static final int COLUMN_DES_IND_EMAIL_ALT = 5;

	/** 
	 * Index of column DES_PSW
	 */
	protected static final int COLUMN_DES_PSW = 6;

	/** 
	 * Index of column DES_FILE_LDAP
	 */
	protected static final int COLUMN_DES_FILE_LDAP = 7;

	/** 
	 * Index of column COD_PGM_ULT_MOV
	 */
	protected static final int COLUMN_COD_PGM_ULT_MOV = 8;

	/** 
	 * Index of column COD_UTE_ULT_MOV
	 */
	protected static final int COLUMN_COD_UTE_ULT_MOV = 9;

	/** 
	 * Index of column DAT_ORA_ULT_MOV
	 */
	protected static final int COLUMN_DAT_ORA_ULT_MOV = 10;

	/** 
	 * Index of column FLG_VAL_UTE
	 */
	protected static final int COLUMN_FLG_VAL_UTE = 11;

	/** 
	 * Index of column DES_COG
	 */
	protected static final int COLUMN_DES_COG = 12;

	/** 
	 * Index of column DES_NOM
	 */
	protected static final int COLUMN_DES_NOM = 13;

	/** 
	 * Index of column pr
	 */
	protected static final int COLUMN_PR = 14;

	/** 
	 * Index of column iddipendente
	 */
	protected static final int COLUMN_IDDIPENDENTE = 15;

	/** 
	 * Index of column Commessa
	 */
	protected static final int COLUMN_COMMESSA = 16;

	/** 
	 * Index of column allocato
	 */
	protected static final int COLUMN_ALLOCATO = 17;

	/** 
	 * Index of column reparto
	 */
	protected static final int COLUMN_REPARTO = 18;

	/** 
	 * Index of column PercentualeCIGO
	 */
	protected static final int COLUMN_PERCENTUALE_C_I_G_O = 19;

	/** 
	 * Index of column datainizio
	 */
	protected static final int COLUMN_DATAINIZIO = 20;

	/** 
	 * Index of column datafine
	 */
	protected static final int COLUMN_DATAFINE = 21;

	/** 
	 * Index of column datarientroanticipato
	 */
	protected static final int COLUMN_DATARIENTROANTICIPATO = 22;

	/** 
	 * Index of column formazione
	 */
	protected static final int COLUMN_FORMAZIONE = 23;

	/** 
	 * Index of column fulltime
	 */
	protected static final int COLUMN_FULLTIME = 24;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 24;

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria ''.
	 */
	public VciElenco001[] findAll() throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'PRG_UTE = :prgUte'.
	 */
	public VciElenco001[] findWherePrgUteEquals(int prgUte) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_UTE = ? ORDER BY PRG_UTE", new Object[] {  new Integer(prgUte) } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'DES_UTE = :desUte'.
	 */
	public VciElenco001[] findWhereDesUteEquals(String desUte) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_UTE = ? ORDER BY DES_UTE", new Object[] { desUte } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'COD_FISCALE = :codFiscale'.
	 */
	public VciElenco001[] findWhereCodFiscaleEquals(String codFiscale) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COD_FISCALE = ? ORDER BY COD_FISCALE", new Object[] { codFiscale } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'DES_IND_EMAIL = :desIndEmail'.
	 */
	public VciElenco001[] findWhereDesIndEmailEquals(String desIndEmail) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_IND_EMAIL = ? ORDER BY DES_IND_EMAIL", new Object[] { desIndEmail } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'DES_IND_EMAIL_ALT = :desIndEmailAlt'.
	 */
	public VciElenco001[] findWhereDesIndEmailAltEquals(String desIndEmailAlt) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_IND_EMAIL_ALT = ? ORDER BY DES_IND_EMAIL_ALT", new Object[] { desIndEmailAlt } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'DES_PSW = :desPsw'.
	 */
	public VciElenco001[] findWhereDesPswEquals(String desPsw) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_PSW = ? ORDER BY DES_PSW", new Object[] { desPsw } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'DES_FILE_LDAP = :desFileLdap'.
	 */
	public VciElenco001[] findWhereDesFileLdapEquals(String desFileLdap) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_FILE_LDAP = ? ORDER BY DES_FILE_LDAP", new Object[] { desFileLdap } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'COD_PGM_ULT_MOV = :codPgmUltMov'.
	 */
	public VciElenco001[] findWhereCodPgmUltMovEquals(String codPgmUltMov) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COD_PGM_ULT_MOV = ? ORDER BY COD_PGM_ULT_MOV", new Object[] { codPgmUltMov } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'COD_UTE_ULT_MOV = :codUteUltMov'.
	 */
	public VciElenco001[] findWhereCodUteUltMovEquals(String codUteUltMov) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COD_UTE_ULT_MOV = ? ORDER BY COD_UTE_ULT_MOV", new Object[] { codUteUltMov } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'DAT_ORA_ULT_MOV = :datOraUltMov'.
	 */
	public VciElenco001[] findWhereDatOraUltMovEquals(Date datOraUltMov) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DAT_ORA_ULT_MOV = ? ORDER BY DAT_ORA_ULT_MOV", new Object[] { datOraUltMov==null ? null : new java.sql.Date( datOraUltMov.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'FLG_VAL_UTE = :flgValUte'.
	 */
	public VciElenco001[] findWhereFlgValUteEquals(String flgValUte) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FLG_VAL_UTE = ? ORDER BY FLG_VAL_UTE", new Object[] { flgValUte } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'DES_COG = :desCog'.
	 */
	public VciElenco001[] findWhereDesCogEquals(String desCog) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_COG = ? ORDER BY DES_COG", new Object[] { desCog } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'DES_NOM = :desNom'.
	 */
	public VciElenco001[] findWhereDesNomEquals(String desNom) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_NOM = ? ORDER BY DES_NOM", new Object[] { desNom } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'pr = :pr'.
	 */
	public VciElenco001[] findWherePrEquals(int pr) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE pr = ? ORDER BY pr", new Object[] {  new Integer(pr) } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'iddipendente = :iddipendente'.
	 */
	public VciElenco001[] findWhereIddipendenteEquals(int iddipendente) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE iddipendente = ? ORDER BY iddipendente", new Object[] {  new Integer(iddipendente) } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'Commessa = :commessa'.
	 */
	public VciElenco001[] findWhereCommessaEquals(String commessa) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Commessa = ? ORDER BY Commessa", new Object[] { commessa } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'allocato = :allocato'.
	 */
	public VciElenco001[] findWhereAllocatoEquals(String allocato) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE allocato = ? ORDER BY allocato", new Object[] { allocato } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'full-time = :fullTime'.
	 */
	public VciElenco001[] findWhereFullTimeEquals(String fullTime) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE full-time = ? ORDER BY full-time", new Object[] { fullTime } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'reparto = :reparto'.
	 */
	public VciElenco001[] findWhereRepartoEquals(String reparto) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE reparto = ? ORDER BY reparto", new Object[] { reparto } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'PercentualeCIGO = :percentualeCIGO'.
	 */
	public VciElenco001[] findWherePercentualeCIGOEquals(int percentualeCIGO) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PercentualeCIGO = ? ORDER BY PercentualeCIGO", new Object[] {  new Integer(percentualeCIGO) } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'datainizio = :datainizio'.
	 */
	public VciElenco001[] findWhereDatainizioEquals(Date datainizio) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE datainizio = ? ORDER BY datainizio", new Object[] { datainizio==null ? null : new java.sql.Timestamp( datainizio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'datafine = :datafine'.
	 */
	public VciElenco001[] findWhereDatafineEquals(Date datafine) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE datafine = ? ORDER BY datafine", new Object[] { datafine==null ? null : new java.sql.Timestamp( datafine.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'datarientroanticipato = :datarientroanticipato'.
	 */
	public VciElenco001[] findWhereDatarientroanticipatoEquals(Date datarientroanticipato) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE datarientroanticipato = ? ORDER BY datarientroanticipato", new Object[] { datarientroanticipato==null ? null : new java.sql.Timestamp( datarientroanticipato.getTime() ) } );
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the criteria 'formazione = :formazione'.
	 */
	public VciElenco001[] findWhereFormazioneEquals(String formazione) throws VciElenco001DaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE formazione = ? ORDER BY formazione", new Object[] { formazione } );
	}

	/**
	 * Method 'VciElenco001DaoImpl'
	 * 
	 */
	public VciElenco001DaoImpl()
	{
	}

	/**
	 * Method 'VciElenco001DaoImpl'
	 * 
	 * @param userConn
	 */
	public VciElenco001DaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "group700_fig.vci_elenco001";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected VciElenco001 fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			VciElenco001 dto = new VciElenco001();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected VciElenco001[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			VciElenco001 dto = new VciElenco001();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		VciElenco001 ret[] = new VciElenco001[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(VciElenco001 dto, ResultSet rs) throws SQLException
	{
		dto.setPrgUte( rs.getInt( COLUMN_PRG_UTE ) );
		dto.setDesUte( rs.getString( COLUMN_DES_UTE ) );
		dto.setCodFiscale( rs.getString( COLUMN_COD_FISCALE ) );
		dto.setDesIndEmail( rs.getString( COLUMN_DES_IND_EMAIL ) );
		dto.setDesIndEmailAlt( rs.getString( COLUMN_DES_IND_EMAIL_ALT ) );
		dto.setDesPsw( rs.getString( COLUMN_DES_PSW ) );
		dto.setDesFileLdap( rs.getString( COLUMN_DES_FILE_LDAP ) );
		dto.setCodPgmUltMov( rs.getString( COLUMN_COD_PGM_ULT_MOV ) );
		dto.setCodUteUltMov( rs.getString( COLUMN_COD_UTE_ULT_MOV ) );
		dto.setDatOraUltMov( rs.getDate(COLUMN_DAT_ORA_ULT_MOV ) );
		dto.setFlgValUte( rs.getString( COLUMN_FLG_VAL_UTE ) );
		dto.setDesCog( rs.getString( COLUMN_DES_COG ) );
		dto.setDesNom( rs.getString( COLUMN_DES_NOM ) );
		dto.setPr( rs.getInt( COLUMN_PR ) );
		dto.setIddipendente( rs.getInt( COLUMN_IDDIPENDENTE ) );
		if (rs.wasNull()) {
			dto.setIddipendenteNull( true );
		}
		
		dto.setCommessa( rs.getString( COLUMN_COMMESSA ) );
		dto.setAllocato( rs.getString( COLUMN_ALLOCATO ) );
		dto.setReparto( rs.getString( COLUMN_REPARTO ) );
		dto.setPercentualeCIGO( rs.getInt( COLUMN_PERCENTUALE_C_I_G_O ) );
		if (rs.wasNull()) {
			dto.setPercentualeCIGONull( true );
		}
		
		dto.setDatainizio( rs.getTimestamp(COLUMN_DATAINIZIO ) );
		dto.setDatafine( rs.getTimestamp(COLUMN_DATAFINE ) );
		dto.setDatarientroanticipato( rs.getTimestamp(COLUMN_DATARIENTROANTICIPATO ) );
		dto.setFormazione( rs.getString( COLUMN_FORMAZIONE ) );
		dto.setFulltime( rs.getString( COLUMN_FULLTIME ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(VciElenco001 dto)
	{
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the specified arbitrary SQL statement
	 */
	public VciElenco001[] findByDynamicSelect(String sql, Object[] sqlParams) throws VciElenco001DaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VciElenco001DaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the vci_elenco001 table that match the specified arbitrary SQL statement
	 */
	public VciElenco001[] findByDynamicWhere(String sql, Object[] sqlParams) throws VciElenco001DaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new VciElenco001DaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
