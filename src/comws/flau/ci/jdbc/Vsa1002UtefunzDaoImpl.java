/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package comws.flau.ci.jdbc;

import comws.flau.ci.dao.*;
import comws.flau.ci.factory.*;
import comws.flau.ci.dto.*;
import comws.flau.ci.exceptions.*;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class Vsa1002UtefunzDaoImpl extends AbstractDAO implements Vsa1002UtefunzDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT PRG_UTE, DES_UTE, COD_FISCALE, DES_IND_EMAIL, DES_PSW, DES_COG, DES_NOM, PRG_APP, DES_PRF_PDR, DES_PRF, PRG_PRF_PDR, PRG_PRF_FGL, ORD_FNZ, DES_FNZ, DES_URL, FLG_H24 FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column PRG_UTE
	 */
	protected static final int COLUMN_PRG_UTE = 1;

	/** 
	 * Index of column DES_UTE
	 */
	protected static final int COLUMN_DES_UTE = 2;

	/** 
	 * Index of column COD_FISCALE
	 */
	protected static final int COLUMN_COD_FISCALE = 3;

	/** 
	 * Index of column DES_IND_EMAIL
	 */
	protected static final int COLUMN_DES_IND_EMAIL = 4;

	/** 
	 * Index of column DES_PSW
	 */
	protected static final int COLUMN_DES_PSW = 5;

	/** 
	 * Index of column DES_COG
	 */
	protected static final int COLUMN_DES_COG = 6;

	/** 
	 * Index of column DES_NOM
	 */
	protected static final int COLUMN_DES_NOM = 7;

	/** 
	 * Index of column PRG_APP
	 */
	protected static final int COLUMN_PRG_APP = 8;

	/** 
	 * Index of column DES_PRF_PDR
	 */
	protected static final int COLUMN_DES_PRF_PDR = 9;

	/** 
	 * Index of column DES_PRF
	 */
	protected static final int COLUMN_DES_PRF = 10;

	/** 
	 * Index of column PRG_PRF_PDR
	 */
	protected static final int COLUMN_PRG_PRF_PDR = 11;

	/** 
	 * Index of column PRG_PRF_FGL
	 */
	protected static final int COLUMN_PRG_PRF_FGL = 12;

	/** 
	 * Index of column ORD_FNZ
	 */
	protected static final int COLUMN_ORD_FNZ = 13;

	/** 
	 * Index of column DES_FNZ
	 */
	protected static final int COLUMN_DES_FNZ = 14;

	/** 
	 * Index of column DES_URL
	 */
	protected static final int COLUMN_DES_URL = 15;

	/** 
	 * Index of column FLG_H24
	 */
	protected static final int COLUMN_FLG_H24 = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria ''.
	 */
	public Vsa1002Utefunz[] findAll() throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'PRG_APP     = :prgApp     AND 
PRG_UTE     = :prgUte     AND 
PRG_PRF_PDR = :prgPrfPdr  AND 
PRG_PRF_FGL = :prgPrfFgl'.
	 */
	public Vsa1002Utefunz[] findWherePrgAppUtePdrFglEquals(int prgApp, int prgUte, int prgPrfPdr, int prgPrfFgl) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_APP     = ?     AND  PRG_UTE     = ?     AND  PRG_PRF_PDR = ?  AND  PRG_PRF_FGL = ? ORDER BY PRG_UTE", new Object[] {  new Integer(prgApp),  new Integer(prgUte),  new Integer(prgPrfPdr),  new Integer(prgPrfFgl) } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'DES_UTE = :desUte'.
	 */
	public Vsa1002Utefunz[] findWhereDesUteEquals(String desUte) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_UTE = ? ORDER BY DES_UTE", new Object[] { desUte } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'DES_PSW = :desPsw'.
	 */
	public Vsa1002Utefunz[] findWhereDesPswEquals(String desPsw) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_PSW = ? ORDER BY DES_PSW", new Object[] { desPsw } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'DES_COG = :desCog'.
	 */
	public Vsa1002Utefunz[] findWhereDesCogEquals(String desCog) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_COG = ? ORDER BY DES_COG", new Object[] { desCog } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'DES_NOM = :desNom'.
	 */
	public Vsa1002Utefunz[] findWhereDesNomEquals(String desNom) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_NOM = ? ORDER BY DES_NOM", new Object[] { desNom } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'PRG_APP = :prgApp'.
	 */
	public Vsa1002Utefunz[] findWherePrgAppEquals(int prgApp) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_APP = ? ORDER BY PRG_APP", new Object[] {  new Integer(prgApp) } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'DES_PRF_PDR = :desPrfPdr'.
	 */
	public Vsa1002Utefunz[] findWhereDesPrfPdrEquals(String desPrfPdr) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_PRF_PDR = ? ORDER BY DES_PRF_PDR", new Object[] { desPrfPdr } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'DES_PRF = :desPrf'.
	 */
	public Vsa1002Utefunz[] findWhereDesPrfEquals(String desPrf) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_PRF = ? ORDER BY DES_PRF", new Object[] { desPrf } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'PRG_PRF_PDR = :prgPrfPdr'.
	 */
	public Vsa1002Utefunz[] findWherePrgPrfPdrEquals(int prgPrfPdr) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_PRF_PDR = ? ORDER BY PRG_PRF_PDR", new Object[] {  new Integer(prgPrfPdr) } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'PRG_PRF_FGL = :prgPrfFgl'.
	 */
	public Vsa1002Utefunz[] findWherePrgPrfFglEquals(int prgPrfFgl) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRG_PRF_FGL = ? ORDER BY PRG_PRF_FGL", new Object[] {  new Integer(prgPrfFgl) } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'ORD_FNZ = :ordFnz'.
	 */
	public Vsa1002Utefunz[] findWhereOrdFnzEquals(int ordFnz) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORD_FNZ = ? ORDER BY ORD_FNZ", new Object[] {  new Integer(ordFnz) } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'DES_FNZ = :desFnz'.
	 */
	public Vsa1002Utefunz[] findWhereDesFnzEquals(String desFnz) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_FNZ = ? ORDER BY DES_FNZ", new Object[] { desFnz } );
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the criteria 'DES_URL = :desUrl'.
	 */
	public Vsa1002Utefunz[] findWhereDesUrlEquals(String desUrl) throws Vsa1002UtefunzDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DES_URL = ? ORDER BY DES_URL", new Object[] { desUrl } );
	}

	/**
	 * Method 'Vsa1002UtefunzDaoImpl'
	 * 
	 */
	public Vsa1002UtefunzDaoImpl()
	{
	}

	/**
	 * Method 'Vsa1002UtefunzDaoImpl'
	 * 
	 * @param userConn
	 */
	public Vsa1002UtefunzDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "group700_fig.vsa1002_utefunz";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Vsa1002Utefunz fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Vsa1002Utefunz dto = new Vsa1002Utefunz();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Vsa1002Utefunz[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Vsa1002Utefunz dto = new Vsa1002Utefunz();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Vsa1002Utefunz ret[] = new Vsa1002Utefunz[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Vsa1002Utefunz dto, ResultSet rs) throws SQLException
	{
		dto.setPrgUte( rs.getInt( COLUMN_PRG_UTE ) );
		dto.setDesUte( rs.getString( COLUMN_DES_UTE ) );
		dto.setCodFiscale( rs.getString( COLUMN_COD_FISCALE ) );
		dto.setDesIndEmail( rs.getString( COLUMN_DES_IND_EMAIL ) );
		dto.setDesPsw( rs.getString( COLUMN_DES_PSW ) );
		dto.setDesCog( rs.getString( COLUMN_DES_COG ) );
		dto.setDesNom( rs.getString( COLUMN_DES_NOM ) );
		dto.setPrgApp( rs.getInt( COLUMN_PRG_APP ) );
		if (rs.wasNull()) {
			dto.setPrgAppNull( true );
		}
		
		dto.setDesPrfPdr( rs.getString( COLUMN_DES_PRF_PDR ) );
		dto.setDesPrf( rs.getString( COLUMN_DES_PRF ) );
		dto.setPrgPrfPdr( rs.getInt( COLUMN_PRG_PRF_PDR ) );
		if (rs.wasNull()) {
			dto.setPrgPrfPdrNull( true );
		}
		
		dto.setPrgPrfFgl( rs.getInt( COLUMN_PRG_PRF_FGL ) );
		if (rs.wasNull()) {
			dto.setPrgPrfFglNull( true );
		}
		
		dto.setOrdFnz( rs.getInt( COLUMN_ORD_FNZ ) );
		if (rs.wasNull()) {
			dto.setOrdFnzNull( true );
		}
		
		dto.setDesFnz( rs.getString( COLUMN_DES_FNZ ) );
		dto.setDesUrl( rs.getString( COLUMN_DES_URL ) );
		dto.setFlgH24( rs.getString( COLUMN_FLG_H24 ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Vsa1002Utefunz dto)
	{
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the specified arbitrary SQL statement
	 */
	public Vsa1002Utefunz[] findByDynamicSelect(String sql, Object[] sqlParams) throws Vsa1002UtefunzDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Vsa1002UtefunzDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the vsa1002_utefunz table that match the specified arbitrary SQL statement
	 */
	public Vsa1002Utefunz[] findByDynamicWhere(String sql, Object[] sqlParams) throws Vsa1002UtefunzDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new Vsa1002UtefunzDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}


}
